/*
ID: nissan.po1
LANG: C++
TASK: checker
*/
#include <fstream>
#include <iostream>
#include <string>

using namespace std;

void reset_board();

ofstream out("checker.out");
ifstream in("checker.in");
int size, solutions=0, ok_row[14], ok_ldiag[28], ok_rdiag[28], board[14][14];
bool debug = false;

void print_board() {
  cout << "-----" << endl;
  for (int i=1; i<=size; ++i) {
    for (int j=1; j<=size; ++j) {
      cout << board[i][j];
    }
    cout << endl;
  }
  cout << "-----" << endl;
}

bool can_place_queen(int row, int col) {
  // only need to check diagonals in here
  /*
  cout << "curr: (" << row << "," << col << ")" << endl;
  cout << "ldiag: "; for (int i=1; i<2*size; ++i) cout << ok_ldiag[i]; cout << endl;
  cout << "rdiag: "; for (int i=1; i<2*size; ++i) cout << ok_rdiag[i]; cout << endl;
  */
  int v1, v2;
  v1 = row-col+size;
  v2 = row+col;
 // cout << "ldiag[v1]=" << ok_ldiag[v1] << " rdiag_[v2]=" << ok_rdiag[v2] << endl;
  if (ok_ldiag[v1]==1 && ok_rdiag[v2]==1) {
    ok_ldiag[v1] = ok_rdiag[v2] = 0;
    return true;
  }
  else return false;
}

int pos_of_queen(int col) {
  for (int row=1; row<=size; ++row) {
    if (board[row][col]) {
      return row;
    }
    else cout << "oops not found" << endl;
  }
}

void place_queen(int col) {
  //cout << "place_queen" << endl;
  if (col == size+1) {
    // got a solution!
    cout << "solution" << endl;
    print_board();
    if (solutions < 3) { // only need to keep track of first 3 answers
      for (int col=1; col<=size; ++col) {
         out << pos_of_queen(col);
      }
      out << endl;
    }
    solutions += 1; // increment total number of answers
    return;
  }
  for (int row=1; row<=size; ++row) {
  if (debug) print_board();
    if (ok_row[row] && can_place_queen(row, col)) {
      ok_row[row] = 0;
      board[row][col] = 1; // mark queen at square
  if (debug) print_board();
      place_queen(col+1);
      // recursion failed; free up marked squares
      board[row][col] = 0;
      ok_row[row] = 1;
      int v1,v2;
      v1 = row-col+size;
      v2 = row+col;
      ok_ldiag[v1] = ok_rdiag[v2] = 1;
    }
  }
}

void reset_board() {
  for (int i=0; i<=2*size; ++i) { ok_ldiag[i] = ok_rdiag[i] = 1; }
  for (int i=0; i<=size; ++i) {
    ok_row[i]=1;
    for (int j=0; j<=size; ++j) board[i][j]=0;
  }
}

int main() {
  in >> size;

  // main loop
  for (int row=1; row<=size; ++row) {
    reset_board();
    print_board();
    if (ok_row[row] && can_place_queen(row, 1)) {
      ok_row[row] = 0;
      board[row][1] = 1;
      place_queen(2);
    }
  } 
  out << solutions << endl;
  in.close(); out.close();
}
